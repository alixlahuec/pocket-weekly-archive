name: "Pocket all-time backup"
on:
  workflow_dispatch:

jobs:
  request:
    name: API Request to Pocket
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      today: '${{ steps.date.outputs.TODAY }}'
      filepath: 'archives/${{ steps.date.outputs.TODAY }}/${{ steps.date.outputs.TODAY }}.json'
    steps:
      - uses: actions/checkout@v2
      - name: Get today's date
        id: date
        run: echo "::set-output name=TODAY::$(date +'%Y-%m-%d')"
      - name: Calculate Unix timestamp from a week ago
        id: since
        run: echo "::set-output name=SINCE::$(date --date='1 week ago' +%s)"
      - name: Request the data from the Pocket API (POST)
        id: archive
        uses: Satak/webrequest-action@v1.2.3
        env:
          POCKET_CONSUMER_KEY: ${{ secrets.POCKET_CONSUMER_KEY }}
          POCKET_TOKEN: ${{ secrets.POCKET_TOKEN }}
          PAR_state: "unread"
          PAR_sort: "oldest"
          PAR_detailType: "complete"
        with:
          url: https://getpocket.com/v3/get
          method: POST
          payload: '{"consumer_key": "${{ env.POCKET_CONSUMER_KEY }}", "access_token": "${{ env.POCKET_TOKEN }}", "state": "${{ env.PAR_state }}", "sort": "${{ env.PAR_sort }}", "detailType": "${{ env.PAR_detailType }}"}'
      - name: Create weekly directory
        run: mkdir -p ${{ github.workspace }}/archives/${{ steps.date.outputs.TODAY }}
      - name: Get ujson package
        run: python -m pip install ujson
      - name: Create weekly file
        shell: python
        run: |
          # -*- coding: utf-8 -*-
          import ujson
          items = ujson.dumps("""${{ steps.archive.outputs.output }}""")
          with open('archives/${{ steps.date.outputs.TODAY }}/${{ steps.date.outputs.TODAY }}.json', 'w') as f:
            f.write(items)
      - name: Edit the raw JSON to avoid exposing Consumer Key
        uses: jossef/action-set-json-field@v1
        with:
          file: 'archives/${{ steps.date.outputs.TODAY }}/${{ steps.date.outputs.TODAY }}.json'
          field: payload.consumer_key
          value: 'SECRET'
      - name: Edit the raw JSON to avoid exposing Access Token
        uses: jossef/action-set-json-field@v1
        with:
          file: 'archives/${{ steps.date.outputs.TODAY }}/${{ steps.date.outputs.TODAY }}.json'
          field: payload.access_token
          value: 'SECRET'
      - name: Commit changes
        uses: elstudio/actions-js-build/commit@v3
        with:
          commitMessage: Automated weekly archive (${{ github.event_name }})
  scrapping:
    name: Processing JSON output into Roam format
    needs: [request]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Pull changes in repo
        run: git pull --rebase
      - uses: r-lib/actions/setup-r@master
      - name: Installing packages
        shell: Rscript {0}
        run: install.packages(c("dplyr", "lubridate", "scales", "rjson"))
      - name: Checking available locales
        run: locale -a
        shell: sh
      - name: JSON wrangling
        shell: Rscript {0}
        run: |
          source("functions.R")
          library(rjson)
          weekly.data <- rjson::fromJSON(file = '${{ needs.request.outputs.filepath }}')
          week.items <- weekly.data[["data"]][["list"]]
          roam.import <- list(list(title = "Pocket Weekly Backlog", children = list()))
          roam.import[[1]][["children"]] <- list(list(string = paste0(lubridate::today()), children = list()))
          roam.import[[1]][["children"]][[1]][["children"]] <- lapply(week.items, FUN = format_pocket_item)
          roam.import[[1]][["children"]][[1]][["children"]] <- unname(roam.import[[1]][["children"]])
          roam.import.json <- rjson::toJSON(roam.import)
          write(roam.import.json, "archives/${{ needs.request.outputs.today }}/roam_import.json")
      - name: Commit changes
        uses: elstudio/actions-js-build/commit@v3
        with:
          commitMessage: Automated Roam formatting (${{ github.event_name }})
